# serverless.yml
# 서비스 이름
service: aws-node-http-api-project
# 프레임워크 버전
frameworkVersion: '3'

#### 공급자(AWS) 설정 ######################################
provider:
  name: aws
  # Default stage (default: dev)
  runtime: nodejs18.x
  # 런타임은 자바스크립트 18버전
  region: ap-northeast-2
  # Default region (default: us-east-1)
  iam:
    #모든 람다 함수에 대해 기존 IAM 역할을 사용하도록 Serverless에 지시하거나 Serverless에서 생성할 역할을 구성합니다
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - 'dynamodb:PutItem'
            - 'dynamodb:Get*'
            - 'dynamodb:Scan*'
            - 'dynamodb:UpdateItem'
            - 'dynamodb:DeleteItem'
          Resource: arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-customerTable-${sls:stage}
          
#### dynamoDB 환경변수 설정 ######################################
  environment:
    DYNAMODB_CUSTOMER_TABLES: ${self:service}-customerTable-${sls:stage}

#### 함수 설정 #################################################
functions:
  # 배포 될 함수 정의
  createCustomer:
    # 핸들러 정의 
    # createCustomer.js 안에 createCustomer 이름으로 선언한 함수
    # [ createCustomer.js(파일명) ].[ createCustomer(함수명) ]
    handler: createCustomer.createCustomer
    
    #이벤트는 함수 실행을 트리거하는 것
    events:
     # HTTP API endpoint 
    - httpApi:
        path: /
        method: post
  getCustomers:
    handler: getCustomers.getCustomers
    events:
      - httpApi:
          path: /
          method: get
  test:
    handler: handler.hello
    events:
      - httpApi:
          path: /
          method: post
#### AWS에서 사용할 리소스 정의  ######################################
#AWS를 서비스 공급자로 사용하는 경우 모든 리소스는 AWS DynamoDB 또는 AWS S3와 같이 서비스 의 AWS Lambda 기능이 의존하는 다른 AWS 인프라 리소스 지정
resources:
  Resources:
    CustomerTable:
    #DynamoDB 테이블 리소스에 주어진 논리적인 이름
      Type: AWS::DynamoDB::Table
      #리소스의 유형을 AWS DynamoDB 테이블로 지정
      Properties:
      #DynamoDB 테이블의 구성 속성
        AttributeDefinitions:
        #테이블의 속성(열)을 정의
          - AttributeName: primary_key
          #속성의 이름을 "primary_key"로 지정
            AttributeType: S
            #속성의 데이터 유형을 문자열로 지정
        BillingMode: PAY_PER_REQUEST
        # 테이블의 요금 청구 모드를 "PAY_PER_REQUEST"로 설정합니다. 이 경우 요청 당 지불 방식으로 테이블이 과금
        KeySchema:
        #테이블의 주 키 스키마를 정의
          - AttributeName: primary_key
          #"primary_key" 속성이 주 키임을 지정
            KeyType: HASH
        TableName: ${self:service}-customerTable-${sls:stage}
        # 이블의 이름을 동적으로 설정합니다. ${self:service}는 서비스 이름을 참조하고, ${sls:stage}는 서버리스 스테이지를 참조합니다. 이를 통해 테이블 이름에 서비스 이름과 스테이지 정보가 포함